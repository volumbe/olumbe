---
import Layout from "../layouts/Layout.astro";
---

<Layout title="/terminal">
  <main class="w-full h-full px-0 sm:px-0">
    <section
      class="relative h-full w-full flex flex-col rounded-none border border-slate-800/70 bg-gradient-to-b from-slate-900/70 to-black/80 shadow-2xl shadow-emerald-500/10 backdrop-blur-md overflow-hidden"
    >
      <header
        class="flex items-center justify-between px-4 py-2 border-b border-slate-800/70 bg-slate-900/60"
      >
        <div class="flex items-center gap-2">
          <span class="h-3 w-3 rounded-full bg-red-500/80"></span>
          <span class="h-3 w-3 rounded-full bg-amber-400/80"></span>
          <span class="h-3 w-3 rounded-full bg-emerald-400/80"></span>
        </div>
        <p class="text-[0.8rem] text-slate-300/80 font-medium tracking-wide">
          guest@olumbe
        </p>
        <div class="w-12" aria-hidden="true"></div>
      </header>

      <div class="p-3 sm:p-4 flex-1 flex flex-col min-h-0">
        <div
          class="font-mono text-sm leading-relaxed text-slate-200/95 flex-1 overflow-y-auto pr-2"
          data-terminal-output
          aria-live="polite"
          aria-relevant="additions"
        >
          <ol class="space-y-1" id="terminal-list">
            <li class="text-slate-400">Welcome to the Olumbe terminal.</li>
            <li class="text-slate-400">
              Type <span class="text-emerald-400">help</span> for options.
            </li>
          </ol>
        </div>

        <form class="mt-3" data-terminal-form>
          <div
            class="group flex items-center gap-2 rounded-lg border border-slate-800/70 bg-slate-900/40 px-3 py-2 focus-within:border-emerald-400/60 focus-within:shadow-[0_0_0_3px_rgba(52,211,153,0.15)] transition"
          >
            <span class="select-none text-emerald-400">guest@olumbe:</span>
            <input
              type="text"
              name="command"
              autocomplete="off"
              placeholder="Start typingâ€¦ (try: help, clear)"
              class="min-w-0 flex-1 bg-transparent outline-none placeholder-slate-500 text-slate-100 caret-emerald-400"
              aria-label="Terminal input"
              data-terminal-input
            />
          </div>
        </form>
      </div>

      <div
        class="pointer-events-none absolute inset-0 rounded-xl ring-1 ring-inset ring-white/5"
      >
      </div>
    </section>
  </main>

  <script>
    const outputContainer = document.querySelector(
      "[data-terminal-output]"
    ) as HTMLElement | null;
    const outputList = document.getElementById(
      "terminal-list"
    ) as HTMLOListElement | null;
    const form = document.querySelector(
      "[data-terminal-form]"
    ) as HTMLFormElement | null;
    const input = document.querySelector(
      "[data-terminal-input]"
    ) as HTMLInputElement | null;

    /**
     * Append a new line to the terminal output.
     * @param {string} text
     * @param {"system"|"user"|"info"} variant
     */
    function appendLine(
      text: string,
      variant: "system" | "user" | "info" = "user"
    ) {
      if (!outputList) return;
      const listItem = document.createElement("li");
      listItem.textContent = text;
      listItem.className =
        variant === "system"
          ? "text-slate-400"
          : variant === "info"
            ? "text-emerald-300"
            : "text-slate-100";
      outputList.appendChild(listItem);
      // Scroll to bottom smoothly
      requestAnimationFrame(() => {
        outputContainer?.scrollTo({
          top: outputContainer.scrollHeight,
          behavior: "smooth",
        });
      });
    }

    function showHelp() {
      appendLine("Available commands:", "info");
      appendLine("  help   - Show this help", "system");
      appendLine("  clear  - Clear the terminal", "system");
    }

    function handleCommand(raw: string) {
      const command = raw.trim();
      if (!command) return;

      // Echo the prompt + command
      appendLine(`guest@olumbe: ${command}`);

      // Simple built-in commands for UX
      switch (command.toLowerCase()) {
        case "clear":
          if (outputList) outputList.innerHTML = "";
          break;
        case "help":
          showHelp();
          break;
        default:
          // No extra echo for unknown commands; only show the prompt line above
          break;
      }
    }

    form?.addEventListener("submit", (event: SubmitEvent) => {
      event.preventDefault();
      const value = input?.value ?? "";
      handleCommand(value);
      if (input) input.value = "";
    });

    // Submit on Enter (form handles it), preserve Shift+Enter for newline (if desired later)
    input?.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        form?.dispatchEvent(new Event("submit", { cancelable: true }));
      }
    });

    // Autofocus input on load and when clicking anywhere inside the terminal
    window.addEventListener("load", () => input?.focus());
    (document.querySelector("section") as HTMLElement | null)?.addEventListener(
      "click",
      () => input?.focus()
    );
  </script>

  <style>
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    /* Subtle vignette */
    section::after {
      content: "";
      position: absolute;
      inset: 0;
      pointer-events: none;
      border-radius: 0.75rem;
      box-shadow: inset 0 0 80px rgba(2, 6, 23, 0.9);
    }
  </style>
</Layout>
